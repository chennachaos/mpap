
#include "Macro.h"
#include "DomainTree.h"
//#include "Solid.h"
//#include "Fluid.h"


extern DomainTree domain;


int macro57(Macro &macro)
{
/*
  if (!macro) 
  { 
    macro.name = "dom";
    macro.type = "diff";
    macro.what = "check stiffness generated by domain elimination";

    macro.sensitivity[INTER] = true;
    macro.sensitivity[BATCH] = true;
    
    macro.db.selectDomain();


    macro.db.addTextField("  perturbation",0.0001,8);
    macro.db.addTextField("digits [total]",10);
    macro.db.addTextField("digits [ < 1 ]",5);

    macro.db.addRadioBox("g-format","*f-format");

    macro.db.addTextField   ("max random U",0.);
    macro.db.addTextField   ("max random X",0.);

    return 0;	  
  }
//--------------------------------------------------------------------------------------------------

  int    type, id, el, gp, dig, dig2;

  bool   gfrmt, lagr;

  double ddd, maxU, maxX;
  
  type   = roundToInt(macro.p[0]);
  id     = roundToInt(macro.p[1]) - 1;
  ddd    = macro.p[2];
  dig    = roundToInt(macro.p[3]);
  dig2   = roundToInt(macro.p[4]);
  gfrmt  = (roundToInt(macro.p[5]) == 1);
  maxU   = abs(macro.p[6]);
  maxX   = abs(macro.p[7]);

  if (!isSolid(domain(type,id)) && !isFluid(domain(type,id)))
       // replace by: (isDerivedfrom(FiniteElementBVPWI))
  {
    COUT << "ERROR: this works only for solids and fluids!\n\n";
    return 0;
  }

  domain(type,id).eliminateDiffTest(maxU,maxX,ddd,dig,dig2,gfrmt);
*/
//--------------------------------------------------------------------------------------------------
  return 0;  
}

